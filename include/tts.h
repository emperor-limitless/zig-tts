/* SPDXLicenseIdentifier: MIT */

#ifndef TTS_RS_H
#define TTS_RS_H

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef enum Backends
{
#if defined(__ANDROID__)
  BACKENDS_ANDROID,
#endif
#if defined(__APPLE__)
  BACKENDS_APP_KIT,
#endif
#if defined(__APPLE__)
  BACKENDS_AV_FOUNDATION,
#endif
#if defined(__linux__)
  BACKENDS_SPEECH_DISPATCHER,
#endif
#if defined(__WIN32__)
  BACKENDS_TOLK,
#endif
#if defined(__EMSCRIPTEN__)
  BACKENDS_WEB,
#endif
#if defined(__WIN32__)
  BACKENDS_WIN_RT,
#endif
} Backends;

typedef struct Tts Tts;

typedef struct UtteranceId UtteranceId;

typedef struct Features
{
  bool is_speaking;
  bool pitch;
  bool rate;
  bool stop;
  bool utterance_callbacks;
  bool voice;
  bool get_voice;
  bool volume;
} Features;

#ifdef __cplusplus
extern "C"
{
#endif // __cplusplus

  /**
   * Get the last reported error as a const C string.
   * This string will be valid until at least the next call to `tts_get_error`.
   * It is never called internally by the library.
   */
  const char *tts_get_error(void);

  /**
   * Deallocate the last reported error (if any).
   */
  void tts_clear_error(void);

  /**
   * Create a new `Tts` instance with the specified backend.
   * If an error occurs, returns a null pointer,
   * Call `tts_get_error()` for more information about the specific error.
   */
  struct Tts *tts_new(enum Backends backend);

  /**
   * Create a new Tts object with the default backend.
   * If an error occurs, returns a null pointer,
   * Call `tts_get_error()` for more information about the specific error.
   */
  struct Tts *tts_default(void);

  /**
   * Free the memory associated with a Tts object.
   * If `tts` is a null pointer, this function does nothing.
   */
  void tts_free(struct Tts *tts);

  /**
   * Returns the features supported by this Tts engine in the object specified by `features`.
   * `tts` must be a valid pointer to a Tts object.
   * `features` must be a valid pointer to an uninitialized `Features` object.
   */
  void tts_supported_features(const struct Tts *tts, struct Features *features);

  /**
   * Speaks the specified text, optionally interrupting current speech.
   * If `utterance` is not NULL, , fills it with a pointer to the returned UtteranceId (or NULL if
   * the backend doesn't provide one).
   * Returns true on success, false on error or if `tts` is NULL.
   */
  bool tts_speak(struct Tts *tts, const char *text, bool interrupt, struct UtteranceId **utterance);

  /**
   * Free the memory associated with an `UtteranceId`.
   * Does nothing if `utterance` is NULL.
   */
  void tts_free_utterance(struct UtteranceId *utterance);

  /**
   * Stops current speech.
   * Returns true on success, false on error or if `tts` is NULL.
   */
  bool tts_stop(struct Tts *tts);

  /**
   * Returns the minimum rate for this speech synthesizer.
   * `tts` must be a valid pointer to a Tts object.
   */
  float tts_min_rate(const struct Tts *tts);

  /**
   * Returns the maximum rate for this speech synthesizer.
   * `tts` must be a valid pointer to a Tts object.
   */
  float tts_max_rate(const struct Tts *tts);

  /**
   * Returns the normal rate for this speech synthesizer.
   * `tts` must be a valid pointer to a Tts object.
   */
  float tts_normal_rate(const struct Tts *tts);

  /**
   * Gets the current speech rate.
   * Returns true on success, false on error (likely that the backend doesn't support rate changes)
   * or if `tts` is NULL.
   * Does nothing if `rate` is NULL.
   */
  bool tts_get_rate(const struct Tts *tts, float *rate);

  /**
   * Sets the desired speech rate.
   * Returns true on success, false on error (likely that the backend doesn't support rate changes)
   * or if `tts` is NULL.
   */
  bool tts_set_rate(struct Tts *tts, float rate);

  /**
   * Returns the minimum pitch for this speech synthesizer.
   * `tts` must be a valid pointer to a Tts object.
   */
  float tts_min_pitch(const struct Tts *tts);

  /**
   * Returns the maximum pitch for this speech synthesizer.
   * `tts` must be a valid pointer to a Tts object.
   */
  float tts_max_pitch(const struct Tts *tts);

  /**
   * Returns the normal pitch for this speech synthesizer.
   * `tts` must be a valid pointer to a Tts object.
   */
  float tts_normal_pitch(const struct Tts *tts);

  /**
   * Gets the current speech pitch.
   * Returns true on success, false on error (likely that the backend doesn't support pitch changes)
   * or if `tts` is NULL.
   * Does nothing if `pitch` is NULL.
   */
  bool tts_get_pitch(const struct Tts *tts, float *pitch);

  /**
   * Sets the desired speech pitch.
   * Returns true on success, false on error (likely that the backend doesn't support pitch changes)
   * or if `tts` is NULL.
   */
  bool tts_set_pitch(struct Tts *tts, float pitch);

  /**
   * Returns the minimum volume for this speech synthesizer.
   * `tts` must be a valid pointer to a Tts object.
   */
  float tts_min_volume(const struct Tts *tts);

  /**
   * Returns the maximum volume for this speech synthesizer.
   * `tts` must be a valid pointer to a Tts object.
   */
  float tts_max_volume(const struct Tts *tts);

  /**
   * Returns the normal volume for this speech synthesizer.
   * `tts` must be a valid pointer to a Tts object.
   */
  float tts_normal_volume(const struct Tts *tts);

  /**
   * Gets the current speech volume.
   * Returns true on success, false on error (likely that the backend doesn't support volume changes)
   * or if `tts` is NULL.
   * Does nothing if `volume` is NULL.
   */
  bool tts_get_volume(const struct Tts *tts, float *volume);

  /**
   * Sets the desired speech volume.
   * Returns true on success, false on error (likely that the backend doesn't support volume changes)
   * or if `tts` is NULL.
   */
  bool tts_set_volume(struct Tts *tts, float volume);

  /**
   * fills `speaking` with a bool indicating  whether this speech synthesizer is speaking.
   * Returns true on success, false on error (likely that the backend doesn't support speaking
   * status) or if `tts` is NULL.
   * If `speaking` is NULL, returns this value instead, meaning you can't tell the difference
   * between an error occuring and the synth not speaking.
   */
  bool tts_is_speaking(const struct Tts *tts, bool *speaking);

#ifdef __cplusplus
} // extern "C"
#endif // __cplusplus

#endif /* TTS_RS_H */
